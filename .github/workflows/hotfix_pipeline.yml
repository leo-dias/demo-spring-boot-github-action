name: 04 - CI/CD Pipeline for Hotfix Branch

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAVEN_CLI_OPTS: "-B -V"

jobs:
  build_hotfix:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn ${{ env.MAVEN_CLI_OPTS }} clean install

  test_hotfix:
    needs: build_hotfix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Test with Maven
        run: mvn ${{ env.MAVEN_CLI_OPTS }} test

  deploy_hotfix:
    needs: test_hotfix
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to hotfix environment
        run: echo "Deploying to hotfix"

  create_tag:
    needs: deploy_hotfix
    runs-on: ubuntu-latest
    environment: 'DEPLOY_PROD'
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
      - name: Bump version and push tag
        run: |
          git fetch --tags
          VERSION_CHANGES="patch"
          
          LAST_TAG=$(git tag -l --sort=-v:refname | head -n 1)
          MAJOR=$(echo $LAST_TAG | cut -d . -f1)
          MINOR=$(echo $LAST_TAG | cut -d . -f2)
          PATCH=$(echo $LAST_TAG | cut -d . -f3)
          PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$PATCH"
          echo "Bumping $LAST_TAG to $NEW_TAG"

          git tag $NEW_TAG
          git push origin $NEW_TAG

  create_release:
    needs: create_tag
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get tag name from ref
        shell: bash
        run: |
          git fetch --tags
          LAST_TAG=$(git tag -l --sort=-v:refname | head -n 1)
          echo "::set-output name=tag::$LAST_TAG"
        id: get_tag

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_OTHER_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false

  deploy_prod:
    needs: create_release
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to prod environment
        run: echo "Deploying to prod"

  pr_hotfix:
    needs: deploy_prod
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#        with:
#          ref: dev
#          fetch-depth: 0  # Required for rebasing

      - name: Create a Temporary Hotfix Branch for PR
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout hotfix/master 
          git pull
          BRANCH_NAME=hotfix/$(date +%s)
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
          echo "::set-output name=branch_name::$BRANCH_NAME"
        id: get_branch_name
        env:
          GIT_TOKEN: ${{ secrets.MY_OTHER_TOKEN }}

      - name: Create a Hotfix PR from Temporary Hotfix Branch
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ steps.get_branch_name.outputs.branch_name }}
          destination_branch: "dev"
          pr_title: "Rebase Dev on Hotfix changes"
          pr_body: "This PR rebases the Dev branch on recent hotfix changes. **It requires manual approval before it can be merged.**"
          pr_label: "rebase"
          pr_allow_empty: false
          github_token: ${{ secrets.MY_ACTION_TOKEN }}
